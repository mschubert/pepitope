[{"path":"/articles/qc.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Quality control","text":"pat1 pat2 pat3 common can confirm barcodes overlap:","code":"plot_barcode_overlap(all_constructs, valid_barcodes) #> Joining with `by = join_by(barcode)`"},{"path":"/articles/qc.html","id":"barcoded-construct-tables","dir":"Articles","previous_headings":"Preparation","what":"Barcoded construct tables","title":"Quality control","text":"Variant Calling step package provides table tiled reference alternative peptides, along respective IDs. ordering gene blocks, one construct barcodes added sequence, able uniquely identify minigene peptides also sequencing read reach mutated base. , use barcodes publication Github repository: barcodes need length overlap samples one QC run. analysis, manually add columns peptide/minigene tables: barcode – one barcode per construct barcode_1, barcode_2, etc. – multiple barcodes per construct required fields , sample: gene_name – identifier gene, e.g. NRAS mut_id – common identifier ref alt sequences, e.g. NRAS_Q61 pep_id – unique identifier peptide, e.g. NRAS_Q61L-1 pep_type – whether ref alt sequence () tiled – tiled nucleotide sequence QC analysis, need named list barcoded Minigene tables. usually assembled .xlsx file barcodes added, however, use example dataset:","code":"lib = \"https://raw.githubusercontent.com/hawkjo/freebarcodes/master/barcodes/barcodes12-1.txt\" valid_barcodes = readr::read_tsv(lib, col_names=FALSE)$X1 ## normally we'd read all sheets from our barcoded construct file: # fname = \"my_combined_barcoded_file.xlsx\" # sheets = readxl::excel_sheets(fname) # all_constructs = sapply(sheets, readxl::read_xlsx, path=fname, simplify=FALSE)  all_constructs = example_peptides(valid_barcodes)"},{"path":"/articles/qc.html","id":"creating-a-sample-sheet","dir":"Articles","previous_headings":"Preparation","what":"Creating a sample sheet","title":"Quality control","text":"sequencing (FASTQ) file contain sample barcode, construct barcode, construct sequence: can start working FASTQ sequencing output, need describe samples contains. , create sample sheet following columns: sample_id – unique identifier sample patient – patient sample group sample comes rep – number indicating replicate number origin – descriptor kind sample barcode – barcode used label condition-specific constructs sequencing data example, already provided sample sheet package. includes three samples, two library QC (pat2 pat3) one mock-transfected vs. actual peptide T-cell co-culture (pat1). pat1 pat2 samples additionally include common construct set. Whenever use multiple construct sets sample, separate using +: , actually sequencing, provide simulated FASTQ file instead:","code":"fastq_file = \"/path/to/your/file.fq.gz\" sample_sheet = system.file(\"my_samples.tsv\", package=\"pepitope\") fastq_file = example_fastq(sample_sheet, all_constructs)"},{"path":[]},{"path":"/articles/qc.html","id":"sample-demultiplexing","dir":"Articles","previous_headings":"Demultiplexing and counting","what":"Sample demultiplexing","title":"Quality control","text":"step using fqtk toolkit split multi-sample FASTQ file individual sample files, separated sample barcode save temporary directory. , read_structures describes split samples. following possible fields, preceded number nucleotides read. + instead number used indicated use remaining nucleotides: B – sample barcode split (required) T – read sequence construct barcode sequence (required) S – skip nucleotides include output (optional) example, use 7-nucleotide barcode samples keep rest read split files: can perform additional quality control steps sample-level FASTQ files, e.g. using fastqc multiqc (included package).","code":"temp_dir = demux_fq(fastq_file, sample_sheet, read_structures=\"7B+T\") list.files(temp_dir, pattern=\"\\\\.fq\\\\.gz$\") #> [1] \"lib1.R1.fq.gz\"      \"lib2.R1.fq.gz\"      \"mock1.R1.fq.gz\"     #> [4] \"mock2.R1.fq.gz\"     \"screen1.R1.fq.gz\"   \"screen2.R1.fq.gz\"   #> [7] \"unmatched.R1.fq.gz\""},{"path":"/articles/qc.html","id":"counting-construct-barcodes","dir":"Articles","previous_headings":"Demultiplexing and counting","what":"Counting construct barcodes","title":"Quality control","text":"next step count construct barcodes individual FASTQ file demultiplexing. Internally, use guide-counter tool identify position construct barcodes occur library reads subsequently count number occurrences. pass directory containing demultiplexed FASTQ files barcode library file possible (used) barcodes: , dset SummarizedExperiment object can interact following way: colData(dset) – access sample metadata data.frame rowData(dset) – access construct metadata data.frame assay(dset) – access construct counts matrix","code":"dset = count_bc(temp_dir, all_constructs, valid_barcodes) #> Joining with `by = join_by(sample_id)` #> Joining with `by = join_by(barcode)`"},{"path":[]},{"path":"/articles/qc.html","id":"plotting-total-barcode-counts","dir":"Articles","previous_headings":"Quality Control plots","what":"Plotting total barcode counts","title":"Quality control","text":"first overview want get know many barcodes demultiplexed FASTQ, whether match sample expect . can plot following way, total read counts left number barcodes 10 reads right:  can also plot interactively plotly:","code":"plot_reads(dset) #> Joining with `by = join_by(barcode)` #> Joining with `by = join_by(sample_id)` library(plotly) plot = plot_reads(dset) #> Joining with `by = join_by(barcode)` #> Joining with `by = join_by(sample_id)` subplot(ggplotly(plot[[1]], height=300),         ggplotly(plot[[2]], height=300), nrows=1) subplot(ggplotly(plot[[3]], height=300),         ggplotly(plot[[4]], height=300), nrows=1)"},{"path":"/articles/qc.html","id":"representation-of-individual-barcodes","dir":"Articles","previous_headings":"Quality Control plots","what":"Representation of individual barcodes","title":"Quality control","text":"next question want ask whether individual construct barcodes equally distributed within sample, potential contaminations come . , order barcodes least abundant (left) abundant (right) plot continuous line many reads sequenced barcode y axis:  can make couple observations plots: Mock Sample conditions worked well pat1 sample-specific barcodes pat2 show high read variance may unsuitable screen quarter sample-specific barcodes pat3 lost sample contamination pat1 pat3 can also plot interactively plotly, can hover mouse see barcode position exactly:","code":"plot_distr(dset) #> Joining with `by = join_by(barcode)` #> Joining with `by = join_by(sample_id)` library(plotly) ggplotly(plot_distr(dset), height=500, tooltip=\"text\") #> Joining with `by = join_by(barcode)` #> Joining with `by = join_by(sample_id)`"},{"path":"/articles/screen.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Co-culture screen","text":"order perform analysis, need SummarizedExperiment (dset) object Quality Control results, need know comparisons want perform. Quality Control step, know two repeats Mock Sample patient-specific (pat1) common library (common). two repeats important, need estimate within-condition variability well -condition variability. However, need make sure perform screen analysis relevant samples, otherwise model may mis-estimate variability:","code":"dset = dset[,grepl(\"pat1\", dset$patient)] colData(dset) #> DataFrame with 4 rows and 10 columns #>           sample_id     patient       rep      origin     barcode total_reads #>         <character>    <factor> <numeric> <character> <character>   <numeric> #> mock1         mock1 pat1+common         1        Mock     TGAGTCC      224687 #> mock2         mock2 pat1+common         2        Mock     CAAGATG      223935 #> screen1     screen1 pat1+common         1      Sample     AACCGAC      454355 #> screen2     screen2 pat1+common         2      Sample     AGAATCG      450164 #>         mapped_reads         smp                short                  label #>            <numeric> <character>          <character>            <character> #> mock1         224687      Mock-1   pat1+common Mock-1 pat1+common Mock-1 (.. #> mock2         223935      Mock-2   pat1+common Mock-2 pat1+common Mock-2 (.. #> screen1       454355    Sample-1 pat1+common Sample-1 pat1+common Sample-1.. #> screen2       450164    Sample-2 pat1+common Sample-2 pat1+common Sample-2.."},{"path":"/articles/screen.html","id":"calculating-differential-abundance","dir":"Articles","previous_headings":"","what":"Calculating differential abundance","title":"Co-culture screen","text":"want perform comparison two conditions, refer comparison origin column sample sheet. case, origin Mock Sample, describe experiment mock-transfected co-cultured cells cells transfected actualy construct library, respectively. Hence, comparison want see changes Sample Mock condition, indicate character vector c(sample, reference) list thereof. case single comparison (character vector), data.frame returned. comparisons supplied list character vectors, result list data.frames: result look like following:","code":"res = screen_calc(dset, list(c(\"Sample\", \"Mock\"))) #> converting counts to integer mode #> Warning in DESeq2::DESeqDataSet(dset, ~rep + origin): some variables in design #> formula are characters, converting to factors #>   the design formula contains one or more numeric variables with integer values, #>   specifying a model with increasing fold change for higher values. #>   did you mean for this to be a factor? if so, first convert #>   this variable to a factor using the factor() function #> using pre-existing size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing #> Joining with `by = join_by(barcode)` res[[1]] #> # A tibble: 212 × 19 #>    barcode baseMean log2FoldChange lfcSE   stat   pvalue     padj bc_type var_id #>    <chr>      <dbl>          <dbl> <dbl>  <dbl>    <dbl>    <dbl> <fct>   <chr>  #>  1 AACAAC…     884.         -3.27  0.300 -10.9  1.63e-27 3.45e-25 pat1    chr1:… #>  2 AACACC…    1015.         -2.09  0.352  -5.94 2.80e- 9 2.97e- 7 pat1    chr1:… #>  3 AACAAC…    1766.         -0.708 0.239  -2.96 3.09e- 3 2.19e- 1 pat1    chr7:… #>  4 AACGCG…    2802.          0.565 0.236   2.40 1.66e- 2 8.13e- 1 common  chr18… #>  5 AACAAC…     961.         -0.605 0.261  -2.31 2.07e- 2 8.13e- 1 pat1    chr7:… #>  6 AACAAC…     693.         -0.633 0.278  -2.27 2.30e- 2 8.13e- 1 pat1    chr2:… #>  7 AACGCT…    1838.         -0.534 0.244  -2.19 2.87e- 2 8.59e- 1 common  CD74-… #>  8 AACAGT…    1463.         -0.527 0.246  -2.14 3.24e- 2 8.59e- 1 pat1    RET--… #>  9 AACGCG…    1638.         -0.472 0.242  -1.95 5.09e- 2 9.27e- 1 common  chr18… #> 10 AACGAC…     613.         -0.540 0.285  -1.89 5.86e- 2 9.27e- 1 common  chr7:… #> # ℹ 202 more rows #> # ℹ 10 more variables: mut_id <chr>, pep_id <chr>, pep_type <chr>, #> #   gene_name <chr>, gene_id <chr>, tx_id <chr>, tiled <chr>, n_tiles <dbl>, #> #   nt <dbl>, peptide <chr>"},{"path":"/articles/screen.html","id":"plotting-the-screen-results","dir":"Articles","previous_headings":"","what":"Plotting the screen results","title":"Co-culture screen","text":"can plot result differential abundance analysis using plot_screen function. argument need supply results table, can fine-tune plot following additional arguments: sample – library (libraries) plot (default: ) links – whether draw arrows ref significant alt peptides labs – whether label constructs less dense areas plot cap_fc – maximum (negative minimum) fold change value bound data points  Quality Control plots already, can also create interactive plot. display links ref alt peptides, instead highlight contruct group (mut_id) interacting data point.","code":"plot_screen(res$`Sample vs Mock`) #> Joining with `by = join_by(bc_type, mut_id)` #> Registered S3 methods overwritten by 'ggpp': method from #> heightDetails.titleGrob ggplot2 widthDetails.titleGrob ggplot2 #> Loading required package: ggplot2"},{"path":[]},{"path":"/articles/variant.html","id":"selecting-the-right-reference-genome","dir":"Articles","previous_headings":"Preparation","what":"Selecting the right reference genome","title":"Variant calling","text":"variant calling RNA-seq counts mapped reference genome gene annotations. important keep consistent NF-core processing pipelines Minigene Library annotation. usually working BSgenome (reference genome) EnsDb (gene annotations) objects. human data, widely used reference genome GRCh38, recent Ensembl annotation release. test data, know GRCh38 correct reference genome Ensembl 106 correct version gene annotations. can get objects BSgenome AnnotationHub Bioconductor packages, respectively. caveat chromosome prefixes need consistent variants VCF file genome/gene annotations. two “styles”, either UCSC (includes “chr” prefix) NCBI/Ensembl (without “chr” prefix). sarek pipline uses UCSC prefixes GRCh38 genome, need switch gene annotation styles: correct styles depend VCF files generated.","code":"ens106 = AnnotationHub::AnnotationHub()[[\"AH100643\"]] #> loading from cache #> require(\"ensembldb\") asm = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38 seqlevelsStyle(ens106) = \"UCSC\""},{"path":"/articles/variant.html","id":"adding-rna-expression","dir":"Articles","previous_headings":"Preparation","what":"Adding RNA expression","title":"Variant calling","text":"NF-core rnaseq workflow provide two gene expression files, one raw read counts one transcripts per million (TPM). contain samples run, need subset current sample interested . files usually called: salmon.merged.gene_counts.tsv salmon.merged.gene_tpm.tsv can combine subset following way:","code":"# note that this is not run in this example because we don't have RNA-seq data counts = readr::read_tsv(\"salmon.merged.gene_counts.tsv\") |>     dplyr::select(gene_id, gene_name, count=SAMPLE) tpm = readr::read_tsv(\"salmon.merged.gene_tpm.tsv\") |>     dplyr::select(gene_id, gene_name, tpm=SAMPLE)  rna_sample = inner_join(counts, tpm)"},{"path":[]},{"path":"/articles/variant.html","id":"reading-and-filtering-mutations","dir":"Articles","previous_headings":"SNPs and small indels","what":"Reading and filtering mutations","title":"Variant calling","text":", using following filters: min_cov = 2 – variant needs covered least 2 reads min_af = 0.05 – variant needs occur leat 5% reads pass = TRUE – variant needs pass standard QC filters resulting vr1 object looks like following:","code":"vr1 = readVcfAsVRanges(variant_vcf_file) |>     filter_variants(min_cov=2, min_af=0.05, pass=TRUE)"},{"path":"/articles/variant.html","id":"annotating-and-subsetting-expressed-variants","dir":"Articles","previous_headings":"SNPs and small indels","what":"Annotating and subsetting expressed variants","title":"Variant calling","text":", using following filters: min_reads = 1 – gene needs least one RNA read min_tpm = 0 – apply additional TPM filter addition, set region interest (context) 15 codons - downstream variant. Hence, SNP total length 93 nucleotides (15*3 + SNP codon ). insertion inserted sequence 15 codons, deletion 15 codons sides. frameshift 15 codons upstream entire sequence downstream STOP codon reached. latter may extend 3’ UTR. subs dataframe looks like following:","code":"ann = annotate_coding(vr1, ens106, asm) subs = ann |> #    filter_expressed(rna_sample, min_reads=1, min_tpm=0) |>     subset_context(15)"},{"path":[]},{"path":"/articles/variant.html","id":"reading-a-fusion-vcf","dir":"Articles","previous_headings":"Fusion genes from RNA-seq","what":"Reading a fusion VCF","title":"Variant calling","text":"First want read fusion genes combined vcf file like one produced rnafusion NF-core pipeline: , using following filters: min_reads = 2 – fusion needs supported 2 split pair distance reads min_split_reads = 1 – fusion needs supported least one split read min_tools = 1 – fusion needs reported least one tool","code":"vr2 = readVcfAsVRanges(fusion_vcf_file) |>     filter_fusions(min_reads=2, min_split_reads=1, min_tools=1)  seqlevelsStyle(vr2) = \"UCSC\""},{"path":"/articles/variant.html","id":"annotating-fusion-genes","dir":"Articles","previous_headings":"Fusion genes from RNA-seq","what":"Annotating fusion genes","title":"Variant calling","text":"Next, subset peptide context analogous SNPs: fus table looks like following:","code":"fus = annotate_fusions(vr2, ens106, asm) |>     subset_context_fusion(15)"},{"path":[]},{"path":"/articles/variant.html","id":"tiling-cdnas-of-interest-into-smaller-peptides","dir":"Articles","previous_headings":"Generating the Minigene Library","what":"Tiling cDNAs of interest into smaller peptides","title":"Variant calling","text":"tiled peptide table looks like following:","code":"tiled = make_peptides(subs, fus) |>     pep_tile() |>     remove_cutsite(BbsI=\"GAAGAC\")"},{"path":"/articles/variant.html","id":"saving-the-report-file","dir":"Articles","previous_headings":"Generating the Minigene Library","what":"Saving the report file","title":"Variant calling","text":"can combine generated tables report save e.g. writexl package. can include tables listed : .xlsx file contain different tables sheets. use annotation file quality control screen steps.","code":"report = make_report(ann, subs, fus, tiled) writexl::write_xlsx(report, \"report_file.xlsx\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Schubert. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schubert M (2025). pepitope: Extract, QC Screen Peptide Epitopes. R package version 0.3.0, https://github.com/mschubert/pepitope.","code":"@Manual{,   title = {pepitope: Extract, QC and Screen Peptide Epitopes},   author = {Michael Schubert},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/mschubert/pepitope}, }"},{"path":"/index.html","id":"pepitope-extract-qc-and-screen-peptide-epitopes","dir":"","previous_headings":"","what":"Extract, QC and Screen Peptide Epitopes","title":"Extract, QC and Screen Peptide Epitopes","text":"Peptide-TCR co-culture screens support development personalized immunotherapy revealing specific reactivity patient-derived T cell receptors patient-specific (neo-)antigens. , provide software tool assist creation patient-specific antigen libraries, well analyzing result co-culture screening data. R package used : Extract peptides flanking region around mutations Run quality control sequencing libraries Perform differential abundance testing co-culture screens","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract, QC and Screen Peptide Epitopes","text":"require R>=4.5.0, includes important fixes Bioconductor. package currently available Github, use theremotes package install: addition, need Rust programming language cargo package manager, use install fqtk guide-counter: can check installation works running:","code":"# run this in R if (!requireNamespace(\"remotes\", quietly=TRUE))     install.packages(\"remotes\") remotes::install_github(\"mschubert/pepitope\", dependencies=TRUE, timeout=300) # run this in your terminal cargo install fqtk guide-counter # run this in R library(pepitope) Sys.which(c(\"fqtk\", \"guide-counter\")) # should print paths, not \"\""},{"path":[]},{"path":"/index.html","id":"generating-peptide-constructs","dir":"","previous_headings":"Usage","what":"Generating peptide constructs","title":"Extract, QC and Screen Peptide Epitopes","text":"sequenced DNA (optionally RNA) patient identified variants .vcf file. now want extract reference mutated alternative sequences including flanking regions summary report. steps : Load genome annotation, usually GRCh38 Ensembl Load VCF variants file VRanges object annotate protein-coding mutations Optionally, load fusion VCF annotating Subset peptide context around mutation Make report variants, coding changes, tiled peptides information can found Variant calling vignette 🔗.","code":"library(pepitope)  # genome and annotation ens106 = AnnotationHub::AnnotationHub()[[\"AH100643\"]] asm = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38 seqlevelsStyle(ens106) = \"UCSC\"  # read variants from VCF file, apply filters and annotate variant_vcf_file = system.file(\"my_variants.vcf\", package=\"pepitope\") vr = readVcfAsVRanges(variant_vcf_file) |>     filter_variants(min_cov=2, min_af=0.05, pass=TRUE) ann = annotate_coding(vr, ens106, asm) subs = ann |> #    filter_expressed(rna_sample, min_reads=1, min_tpm=0) |>     subset_context(15)  # read fusion variants, apply filters and annotate fusion_vcf_file = system.file(\"my_fusions.vcf\", package=\"pepitope\") vr2 = readVcfAsVRanges(fusion_vcf_file) |>     filter_fusions(min_reads=2, min_split_reads=1, min_tools=1) seqlevelsStyle(vr2) = \"UCSC\" fus = annotate_fusions(vr2, ens106, asm) |>     subset_context_fusion(15)  # create construct tables and make a report tiled = make_peptides(subs, fus) |>     pep_tile() |>     remove_cutsite(BbsI=\"GAAGAC\")  report = make_report(ann, subs, fus, tiled) writexl::write_xlsx(report, \"my_variants.xlsx\")"},{"path":"/index.html","id":"creating-construct-library-wetlab","dir":"","previous_headings":"Usage","what":"Creating construct library (wetlab)","title":"Extract, QC and Screen Peptide Epitopes","text":"want express sequences (minigenes) including flanking regions (context) target cells used co-culture screen T-cells. , first need add barcode construct order gene blocks transduce target cells. steps : Add Barcodes annotation sheets barcode barcode_{1,2} columns Order constructs gene blocks clone expression vectors Transduce target cells peptide construct library","code":"# creating barcoded constructs lib = \"https://raw.githubusercontent.com/hawkjo/freebarcodes/master/barcodes/barcodes12-1.txt\" valid_barcodes = readr::read_tsv(lib, col_names=FALSE)$X1 all_constructs = example_peptides(valid_barcodes) plot_barcode_overlap(all_constructs, valid_barcodes) # this file is manually created from the output of step 1 fname = \"my_combined_barcoded_file.xlsx\" sheets = readxl::excel_sheets(fname) all_constructs = sapply(sheets, readxl::read_xlsx, path=fname, simplify=FALSE) plot_barcode_overlap(all_constructs, valid_barcodes)"},{"path":"/index.html","id":"performing-quality-control-on-construct-library-sequencing","dir":"","previous_headings":"Usage","what":"Performing quality control on construct library sequencing","title":"Extract, QC and Screen Peptide Epitopes","text":"step generating target cells expressing reference mutated versions peptide, want make sure library well-represented. , check constructs , whether present similar enough amount. steps : Check quality construct libraries Check quality transduced target cells Check quality co-culture screens information can found Quality Control vignette 🔗","code":"# demultiplexing and counting example data sample_sheet = system.file(\"my_samples.tsv\", package=\"pepitope\") fastq_file = example_fastq(sample_sheet, all_constructs) temp_dir = demux_fq(fastq_file, sample_sheet, read_structures=\"7B+T\") dset = count_bc(temp_dir, all_constructs, valid_barcodes)  # quality control plots plot_reads(dset) plot_distr(dset)"},{"path":"/index.html","id":"differential-abundance-testing-of-co-culture-screens","dir":"","previous_headings":"Usage","what":"Differential abundance testing of co-culture screens","title":"Extract, QC and Screen Peptide Epitopes","text":"Finally, co-culture target cells T-cells expressing variety TCRs expressed peptide libraries find reactive ones. visible decreasing abundance reference peptides compared mock-transduced population cultured way. steps : Calculate differential abundance peptide barcodes Plot results identify peptides recognized T-cells information can found Co-culture screen vignette 🔗.","code":"# perform abundance testing and plot results res = screen_calc(dset, list(c(\"Sample\", \"Mock\"))) plot_screen(res$`Sample vs Mock`)"},{"path":"/reference/add_gex.html","id":null,"dir":"Reference","previous_headings":"","what":"Add gene expression values to variant result — add_gex","title":"Add gene expression values to variant result — add_gex","text":"Add gene expression values variant result","code":""},{"path":"/reference/add_gex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add gene expression values to variant result — add_gex","text":"","code":"add_gex(res, rec)"},{"path":"/reference/add_gex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add gene expression values to variant result — add_gex","text":"res Annotated variants `annotate_coding()` rec Sample record config file","code":""},{"path":"/reference/add_gex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add gene expression values to variant result — add_gex","text":"Annotated variants including gene counts TPM","code":""},{"path":"/reference/add_seq_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds sequence information to break transcripts — add_seq_info","title":"Adds sequence information to break transcripts — add_seq_info","text":"Adds sequence information break transcripts","code":""},{"path":"/reference/add_seq_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds sequence information to break transcripts — add_seq_info","text":"","code":"add_seq_info(gr, cds_break, asm, txdb, tx)"},{"path":"/reference/add_seq_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds sequence information to break transcripts — add_seq_info","text":"gr GenomicRanges object break location cds_break list transcripts overlapping break `cds_by_break` asm Genome sequence package object, eg. ::BSgenome.Hsapiens.NCBI.GRCh38 txdb transcription database, eg. AnnotationHub()[[\"AH100643\"]] tx list transcripts obtained `transcripts(txdb)`","code":""},{"path":"/reference/add_seq_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds sequence information to break transcripts — add_seq_info","text":"DataFrame sequence information","code":""},{"path":"/reference/annotate_coding.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate VCF variants with coding changes — annotate_coding","title":"Annotate VCF variants with coding changes — annotate_coding","text":"Annotate VCF variants coding changes","code":""},{"path":"/reference/annotate_coding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate VCF variants with coding changes — annotate_coding","text":"","code":"annotate_coding(vr, txdb, asm)"},{"path":"/reference/annotate_coding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate VCF variants with coding changes — annotate_coding","text":"vr VRanges object SNVs small indels txdb TxDb EnsDb object asm Genomic sequence BSGenome object","code":""},{"path":"/reference/annotate_coding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate VCF variants with coding changes — annotate_coding","text":"GRanges object annotated variants","code":""},{"path":"/reference/annotate_fusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate fusion VCFs into a table — annotate_fusions","title":"Aggregate fusion VCFs into a table — annotate_fusions","text":"Aggregate fusion VCFs table","code":""},{"path":"/reference/annotate_fusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate fusion VCFs into a table — annotate_fusions","text":"","code":"annotate_fusions(vr, txdb, asm)"},{"path":"/reference/annotate_fusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate fusion VCFs into a table — annotate_fusions","text":"vr VRanges object RNA fusions readVcfAsRanges txdb transcription database, eg. AnnotationHub()[[\"AH100643\"]] asm Genome sequence package object, eg. ::BSgenome.Hsapiens.NCBI.GRCh38","code":""},{"path":"/reference/annotate_fusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate fusion VCFs into a table — annotate_fusions","text":"DataFrame objects fusions","code":""},{"path":"/reference/calc_representation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ranked barcode representation across samples — calc_representation","title":"Calculate ranked barcode representation across samples — calc_representation","text":"Calculate ranked barcode representation across samples","code":""},{"path":"/reference/calc_representation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ranked barcode representation across samples — calc_representation","text":"","code":"calc_representation(lib_counts, bcs, meta)"},{"path":"/reference/calc_representation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ranked barcode representation across samples — calc_representation","text":"lib_counts count matrix bcs Barcodes meta Sample sheet read count summaries","code":""},{"path":"/reference/calc_representation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ranked barcode representation across samples — calc_representation","text":"data.frame ranked read counts fractions","code":""},{"path":"/reference/cds_by_break.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of transcripts with their CDS exons overlapping the break — cds_by_break","title":"Get a list of transcripts with their CDS exons overlapping the break — cds_by_break","text":"Get list transcripts CDS exons overlapping break","code":""},{"path":"/reference/cds_by_break.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of transcripts with their CDS exons overlapping the break — cds_by_break","text":"","code":"cds_by_break(gr, txdb, cds, type = \"left\")"},{"path":"/reference/cds_by_break.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of transcripts with their CDS exons overlapping the break — cds_by_break","text":"gr GenomicRanges object break location txdb transcription database, eg. AnnotationHub()[[\"AH100643\"]] cds list exon coordinates gene `cdsBy(txdb)` type Whether want info 'left' 'right' side break","code":""},{"path":"/reference/cds_by_break.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of transcripts with their CDS exons overlapping the break — cds_by_break","text":"named list transcript GRanges objects CDS exons","code":""},{"path":"/reference/check_silent.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust offsets for variants that start/end silently (no AA change) — check_silent","title":"Adjust offsets for variants that start/end silently (no AA change) — check_silent","text":"Adjust offsets variants start/end silently (AA change)","code":""},{"path":"/reference/check_silent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust offsets for variants that start/end silently (no AA change) — check_silent","text":"","code":"check_silent(ref, alt)"},{"path":"/reference/check_silent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust offsets for variants that start/end silently (no AA change) — check_silent","text":"ref Reference amino acid sequence alt Alternative amino acid sequence","code":""},{"path":"/reference/check_silent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust offsets for variants that start/end silently (no AA change) — check_silent","text":"integer vector offsets","code":""},{"path":"/reference/count_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Count barcodes using guide-counter — count_bc","title":"Count barcodes using guide-counter — count_bc","text":"Count barcodes using guide-counter","code":""},{"path":"/reference/count_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count barcodes using guide-counter — count_bc","text":"","code":"count_bc(tdir, all_constructs, valid_barcodes, reverse_complement = FALSE)"},{"path":"/reference/count_bc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count barcodes using guide-counter — count_bc","text":"tdir Path directory demultiplexed FASTQ files all_constructs named list construct libraries valid_barcodes character vector possible barcodes reverse_complement Whether count reverse complement barcodes instead","code":""},{"path":"/reference/count_bc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count barcodes using guide-counter — count_bc","text":"`SummarizedExperiment` object counts metadata","code":""},{"path":"/reference/count_external.html","id":null,"dir":"Reference","previous_headings":"","what":"Use `guide-counter` via a system call to actually count — count_external","title":"Use `guide-counter` via a system call to actually count — count_external","text":"Use `guide-counter` via system call actually count","code":""},{"path":"/reference/count_external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use `guide-counter` via a system call to actually count — count_external","text":"","code":"count_external(tdir, valid_barcodes, reverse_complement)"},{"path":"/reference/count_external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use `guide-counter` via a system call to actually count — count_external","text":"tdir Path directory demultiplexed FASTQ files valid_barcodes character vector possible barcodes reverse_complement Whether count reverse complement barcodes instead","code":""},{"path":"/reference/count_external.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use `guide-counter` via a system call to actually count — count_external","text":"list data.frame meta matrix counts","code":""},{"path":"/reference/demux_fq.html","id":null,"dir":"Reference","previous_headings":"","what":"Use fqtk tool to demultiplex fastq files — demux_fq","title":"Use fqtk tool to demultiplex fastq files — demux_fq","text":"Use fqtk tool demultiplex fastq files","code":""},{"path":"/reference/demux_fq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use fqtk tool to demultiplex fastq files — demux_fq","text":"","code":"demux_fq(fq, samples, read_structures)"},{"path":"/reference/demux_fq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use fqtk tool to demultiplex fastq files — demux_fq","text":"fq path fastq file demultiplex samples sample sheet `data.frame` tsv format read_structures character string describing read structure","code":""},{"path":"/reference/example_fastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate sequencing data and write them to a temporary FASTQ file — example_fastq","title":"Simulate sequencing data and write them to a temporary FASTQ file — example_fastq","text":"Simulate sequencing data write temporary FASTQ file","code":""},{"path":"/reference/example_fastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate sequencing data and write them to a temporary FASTQ file — example_fastq","text":"","code":"example_fastq(   samples,   peptide_sheets,   target_reads = 1000,   custom = TRUE,   seed = 91651 )"},{"path":"/reference/example_fastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate sequencing data and write them to a temporary FASTQ file — example_fastq","text":"target_reads many reads simulate average custom Whether add custom modifications founds seed random seed used sampling number reads sample_sheet .tsv data.frame file containing sample information peptide_sheet list, item containing construct information","code":""},{"path":"/reference/example_fastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate sequencing data and write them to a temporary FASTQ file — example_fastq","text":"path created FASTQ file","code":""},{"path":"/reference/example_peptide_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a my_peptides.tsv in the inst directory — example_peptide_file","title":"Create a my_peptides.tsv in the inst directory — example_peptide_file","text":"Create my_peptides.tsv inst directory","code":""},{"path":"/reference/example_peptide_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a my_peptides.tsv in the inst directory — example_peptide_file","text":"","code":"example_peptide_file()"},{"path":"/reference/example_peptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Create example peptide sheets for multiple samples — example_peptides","title":"Create example peptide sheets for multiple samples — example_peptides","text":"Create example peptide sheets multiple samples","code":""},{"path":"/reference/example_peptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create example peptide sheets for multiple samples — example_peptides","text":"","code":"example_peptides(valid_barcodes, seed = 18245)"},{"path":"/reference/example_peptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create example peptide sheets for multiple samples — example_peptides","text":"valid_barcodes character vector valid barcodes","code":""},{"path":"/reference/example_peptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create example peptide sheets for multiple samples — example_peptides","text":"named list peptide/minigene constructs barcodes","code":""},{"path":"/reference/extract_fusion_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a fusion VRanges object to left (5') and right (3') GRanges objects — extract_fusion_ranges","title":"Convert a fusion VRanges object to left (5') and right (3') GRanges objects — extract_fusion_ranges","text":"Convert fusion VRanges object left (5') right (3') GRanges objects","code":""},{"path":"/reference/extract_fusion_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a fusion VRanges object to left (5') and right (3') GRanges objects — extract_fusion_ranges","text":"","code":"extract_fusion_ranges(vr)"},{"path":"/reference/extract_fusion_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a fusion VRanges object to left (5') and right (3') GRanges objects — extract_fusion_ranges","text":"vr VRanges object RNA fusions `readVcfAsVRanges`","code":""},{"path":"/reference/extract_fusion_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a fusion VRanges object to left (5') and right (3') GRanges objects — extract_fusion_ranges","text":"list 5' 3' GRanges objects","code":""},{"path":"/reference/filter_fusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a fusion VRanges object by number of reads and tools — filter_fusions","title":"Filter a fusion VRanges object by number of reads and tools — filter_fusions","text":"Filter fusion VRanges object number reads tools","code":""},{"path":"/reference/filter_fusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a fusion VRanges object by number of reads and tools — filter_fusions","text":"","code":"filter_fusions(vr, min_reads = NULL, min_split_reads = NULL, min_tools = NULL)"},{"path":"/reference/filter_fusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a fusion VRanges object by number of reads and tools — filter_fusions","text":"vr VRanges object RNA fusions readVcfAsRanges min_reads minimum number linked read support fusion min_split_reads minimum number split read support fusion min_tools minimum number tools identify fusion","code":""},{"path":"/reference/filter_fusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a fusion VRanges object by number of reads and tools — filter_fusions","text":"filtered VRanges object","code":""},{"path":"/reference/filter_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Make results report to save as xlsx sheets (full, filtered, peptides) — filter_variants","title":"Make results report to save as xlsx sheets (full, filtered, peptides) — filter_variants","text":"Make results report save xlsx sheets (full, filtered, peptides)","code":""},{"path":"/reference/filter_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make results report to save as xlsx sheets (full, filtered, peptides) — filter_variants","text":"","code":"filter_variants(   vr,   ...,   min_cov = 2,   min_af = 0.05,   pass = TRUE,   sample = NULL,   chrs = NULL )"},{"path":"/reference/filter_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make results report to save as xlsx sheets (full, filtered, peptides) — filter_variants","text":"vr VRanges object `readVcfAsVRanges` ... Force filters name (ignored) min_cov Minimum number reads span ALT allele min_af Minimum allele frequency ALT allele pass Whether include softFilterMatrix PASS sample include `sampleNames(vr)` chrs Either \"default\" character vector chromosome names","code":""},{"path":"/reference/get_coding_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the alternative coding sequence of a variant or gene fusion — get_coding_seq","title":"Get the alternative coding sequence of a variant or gene fusion — get_coding_seq","text":"takes account (newly introduced) STOP codons UTR readthroughs","code":""},{"path":"/reference/get_coding_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the alternative coding sequence of a variant or gene fusion — get_coding_seq","text":"","code":"get_coding_seq(asm, txdb, ..., include_stop = TRUE)"},{"path":"/reference/get_coding_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the alternative coding sequence of a variant or gene fusion — get_coding_seq","text":"asm Genomic sequence BSGenome object txdb transcription database, eg. AnnotationHub()[[\"AH100643\"]] ... named DNAStringSet objects row translated consecutively include_stop Whether include STOP codon","code":""},{"path":"/reference/get_coding_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the alternative coding sequence of a variant or gene fusion — get_coding_seq","text":"merged DNAStringSet object translated nucleotides","code":""},{"path":"/reference/is_proper_orf.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical vector whether sequence has START and STOP codon — is_proper_orf","title":"Logical vector whether sequence has START and STOP codon — is_proper_orf","text":"Logical vector whether sequence START STOP codon","code":""},{"path":"/reference/is_proper_orf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical vector whether sequence has START and STOP codon — is_proper_orf","text":"","code":"is_proper_orf(x)"},{"path":"/reference/is_proper_orf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical vector whether sequence has START and STOP codon — is_proper_orf","text":"x DNAStringSet AAStringSet object","code":""},{"path":"/reference/make_peptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a variants report as named list of tables — make_peptides","title":"Make a variants report as named list of tables — make_peptides","text":"Make variants report named list tables","code":""},{"path":"/reference/make_peptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a variants report as named list of tables — make_peptides","text":"","code":"make_peptides(subs, fus = DataFrame())"},{"path":"/reference/make_peptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a variants report as named list of tables — make_peptides","text":"subs Variants within mutation context `subset_context()` fus Variants within fusion context `subset_context_fusions()`","code":""},{"path":"/reference/make_peptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a variants report as named list of tables — make_peptides","text":"data.frame cDNA peptide sequences","code":""},{"path":"/reference/make_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a variants report as named list of tables — make_report","title":"Make a variants report as named list of tables — make_report","text":"Make variants report named list tables","code":""},{"path":"/reference/make_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a variants report as named list of tables — make_report","text":"","code":"make_report(vars, subs, fus = DataFrame(), tiled)"},{"path":"/reference/make_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a variants report as named list of tables — make_report","text":"vars Variant results `annotate_coding()` subs Variants within mutation context `subset_context()` fus Variants within fusion context `subset_context_fusions()` ... Parameters passed `pep_tile` (eg. tile_size, tile_ov) ctx_codons Number codonds sequence context","code":""},{"path":"/reference/merge_constructs.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind the tables of all library annotations together — merge_constructs","title":"Bind the tables of all library annotations together — merge_constructs","text":"Bind tables library annotations together","code":""},{"path":"/reference/merge_constructs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind the tables of all library annotations together — merge_constructs","text":"","code":"merge_constructs(all_constructs)"},{"path":"/reference/merge_constructs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind the tables of all library annotations together — merge_constructs","text":"all_constructs named list construct libraries","code":""},{"path":"/reference/merge_constructs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind the tables of all library annotations together — merge_constructs","text":"`data.frame` constructs","code":""},{"path":"/reference/pep_tile.html","id":null,"dir":"Reference","previous_headings":"","what":"Tile cDNA into peptide sequences — pep_tile","title":"Tile cDNA into peptide sequences — pep_tile","text":"Tile cDNA peptide sequences","code":""},{"path":"/reference/pep_tile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tile cDNA into peptide sequences — pep_tile","text":"","code":"pep_tile(peptides, tile_size = 93, tile_ov = 45)"},{"path":"/reference/pep_tile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tile cDNA into peptide sequences — pep_tile","text":"peptides `data.frame` context-subset peptide/minigene data tile_size Oligo tiling size tile_ov Oligo tiling overlap","code":""},{"path":"/reference/pepitope.html","id":null,"dir":"Reference","previous_headings":"","what":"Pepitope: peptide epitopes from reference genome and variant (VCF) file — pepitope","title":"Pepitope: peptide epitopes from reference genome and variant (VCF) file — pepitope","text":"Given reference genome VCF file, package provide upstream/downstream peptide context variant. generate summary report protein-coding variants including reference mutated allele, read coverage, amino acid sequence, information. can also used remove restriction sites cDNA, alongside helper functions.","code":""},{"path":[]},{"path":"/reference/pepitope.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pepitope: peptide epitopes from reference genome and variant (VCF) file — pepitope","text":"Maintainer: Michael Schubert mschu.dev@gmail.com (ORCID)","code":""},{"path":"/reference/plot_barcode_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot barcode overlap between different samples — plot_barcode_overlap","title":"Plot barcode overlap between different samples — plot_barcode_overlap","text":"Plot barcode overlap different samples","code":""},{"path":"/reference/plot_barcode_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot barcode overlap between different samples — plot_barcode_overlap","text":"","code":"plot_barcode_overlap(all_constructs, valid_barcodes)"},{"path":"/reference/plot_barcode_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot barcode overlap between different samples — plot_barcode_overlap","text":"all_constructs named list constructs","code":""},{"path":"/reference/plot_barcode_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot barcode overlap between different samples — plot_barcode_overlap","text":"ggplot2 object","code":""},{"path":"/reference/plot_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the read distribution across barcodes — plot_distr","title":"Plot the read distribution across barcodes — plot_distr","text":"Plot read distribution across barcodes","code":""},{"path":"/reference/plot_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the read distribution across barcodes — plot_distr","text":"","code":"plot_distr(dset)"},{"path":"/reference/plot_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the read distribution across barcodes — plot_distr","text":"dset `SummarizedExperiment` object `count_bc`","code":""},{"path":"/reference/plot_distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the read distribution across barcodes — plot_distr","text":"`ggplot2` object cumulative read distribution plots","code":""},{"path":"/reference/plot_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the overall read counts — plot_reads","title":"Plot the overall read counts — plot_reads","text":"Plot overall read counts","code":""},{"path":"/reference/plot_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the overall read counts — plot_reads","text":"","code":"plot_reads(dset)"},{"path":"/reference/plot_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the overall read counts — plot_reads","text":"dset `SummarizedExperiment` object `count_bc`","code":""},{"path":"/reference/plot_screen.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot screen results — plot_screen","title":"Plot screen results — plot_screen","text":"Plot screen results","code":""},{"path":"/reference/plot_screen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot screen results — plot_screen","text":"","code":"plot_screen(res, sample = NULL, links = TRUE, labs = TRUE, cap_fc = 8)"},{"path":"/reference/plot_screen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot screen results — plot_screen","text":"res results `data.frame` `screen_calc()` sample library plot (default: ) links Whether draw arrows ref significant alt peptides labs Whether label genes less dense areas cap_fc Maximum amount fold-change limit values ","code":""},{"path":"/reference/plot_screen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot screen results — plot_screen","text":"`ggplot2` object differential expression results","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. SummarizedExperiment assay, colData, rowData VariantAnnotation readVcfAsVRanges","code":""},{"path":"/reference/remove_cutsite.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a Restriction Enzyme cut site but keep AA in a tiled peptide data.frame — remove_cutsite","title":"Remove a Restriction Enzyme cut site but keep AA in a tiled peptide data.frame — remove_cutsite","text":"Remove Restriction Enzyme cut site keep AA tiled peptide data.frame","code":""},{"path":"/reference/remove_cutsite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a Restriction Enzyme cut site but keep AA in a tiled peptide data.frame — remove_cutsite","text":"","code":"remove_cutsite(pep, ...)"},{"path":"/reference/remove_cutsite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a Restriction Enzyme cut site but keep AA in a tiled peptide data.frame — remove_cutsite","text":"pep data.frame tiled peptides ... Named argumennts cut sites, e.g. `BbsI=\"GAAGAC\"`","code":""},{"path":"/reference/remove_cutsite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a Restriction Enzyme cut site but keep AA in a tiled peptide data.frame — remove_cutsite","text":"data.frame replace nucleotides number replacements","code":""},{"path":"/reference/remove_cutsite_nuc.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a Restriction Enzyme cut site but keep AA — remove_cutsite_nuc","title":"Remove a Restriction Enzyme cut site but keep AA — remove_cutsite_nuc","text":"Remove Restriction Enzyme cut site keep AA","code":""},{"path":"/reference/remove_cutsite_nuc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a Restriction Enzyme cut site but keep AA — remove_cutsite_nuc","text":"","code":"remove_cutsite_nuc(nuc, site, seed = NULL)"},{"path":"/reference/remove_cutsite_nuc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a Restriction Enzyme cut site but keep AA — remove_cutsite_nuc","text":"nuc cDNA nucleotide string site Recognition site replaced (fwd+rev comp) seed Set random seed select changes multiple runs","code":""},{"path":"/reference/remove_cutsite_nuc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a Restriction Enzyme cut site but keep AA — remove_cutsite_nuc","text":"cDNA minimal changes longer contain cut site","code":""},{"path":"/reference/screen_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate differential abundance of construct barcodes — screen_calc","title":"Calculate differential abundance of construct barcodes — screen_calc","text":"Calculate differential abundance construct barcodes","code":""},{"path":"/reference/screen_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate differential abundance of construct barcodes — screen_calc","text":"","code":"screen_calc(dset, comparisons)"},{"path":"/reference/screen_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate differential abundance of construct barcodes — screen_calc","text":"comparisons character vector sample reference condition, list thereof eset `SummarizedExperiment` object `count_bc()`","code":""},{"path":"/reference/subset_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset nucleotide/protein sequences to codon +/- 45 bp context — subset_context","title":"Subset nucleotide/protein sequences to codon +/- 45 bp context — subset_context","text":"Subset nucleotide/protein sequences codon +/- 45 bp context","code":""},{"path":"/reference/subset_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset nucleotide/protein sequences to codon +/- 45 bp context — subset_context","text":"","code":"subset_context(codv, ctx_codons)"},{"path":"/reference/subset_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset nucleotide/protein sequences to codon +/- 45 bp context — subset_context","text":"codv Annotated variants `annotate_coding()` ctx_codons many flanking codons include context","code":""},{"path":"/reference/subset_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset nucleotide/protein sequences to codon +/- 45 bp context — subset_context","text":"GRanges object sequence information context","code":""},{"path":"/reference/subset_context_fusion.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset the peptide context for gene fusions — subset_context_fusion","title":"Subset the peptide context for gene fusions — subset_context_fusion","text":"Subset peptide context gene fusions","code":""},{"path":"/reference/subset_context_fusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset the peptide context for gene fusions — subset_context_fusion","text":"","code":"subset_context_fusion(res, ctx_codons)"},{"path":"/reference/subset_context_fusion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset the peptide context for gene fusions — subset_context_fusion","text":"res DataFrame object `fusions` ctx_codons many flanking codons include context","code":""},{"path":"/reference/subset_context_fusion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset the peptide context for gene fusions — subset_context_fusion","text":"DataFrame object gene fusions","code":""},{"path":"/reference/tx_combine_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine break info from each possible left and right side transcript — tx_combine_breaks","title":"Combine break info from each possible left and right side transcript — tx_combine_breaks","text":"Combine break info possible left right side transcript","code":""},{"path":"/reference/tx_combine_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine break info from each possible left and right side transcript — tx_combine_breaks","text":"","code":"tx_combine_breaks(vr, left, right)"},{"path":"/reference/tx_combine_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine break info from each possible left and right side transcript — tx_combine_breaks","text":"vr VRanges object RNA fusions `readVcfAsVRanges` left List DataFrame objects containing 5' fusion right List DataFrame objects containing 3' fusion","code":""},{"path":"/reference/tx_combine_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine break info from each possible left and right side transcript — tx_combine_breaks","text":"DataFrame fusion coordinates sequence information","code":""},{"path":"/news/index.html","id":"pepitope-03","dir":"Changelog","previous_headings":"","what":"pepitope 0.3","title":"pepitope 0.3","text":"Added QC screen incl. plotting functionality package Added command-line wrappers fqtk demultiplexing guide-counter Provided usage vignettes Variant calling, QC Co-culture screen","code":""},{"path":"/news/index.html","id":"pepitope-02","dir":"Changelog","previous_headings":"","what":"pepitope 0.2","title":"pepitope 0.2","text":"Added support RNA-based gene fusion using rnafusion NF-core pipeline","code":""},{"path":"/news/index.html","id":"pepitope-01","dir":"Changelog","previous_headings":"","what":"pepitope 0.1","title":"pepitope 0.1","text":"Provided simple variant annotation sarek NF-core pipeline","code":""}]
